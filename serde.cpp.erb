#include <RH_RF95.h>
#include "./serde.h"

Packet buildPacket(PacketArgs args) {
  return Packet {
    .magic_byte = <%= magic_byte %>,
    <% fields.each_with_index do |field, index| %>
      .<%= field.name %> = args.<%= field.name %> <% if index != fields.length - 1 %>,<% end %>
    <% end %>
  };
}

uint8_t byteFromLong(long num, int bytePosition) {
  long mask = 1;
  for(int i = 0; i < 8; i++) {
    mask |= (mask << 1) | 1;
  }
  mask = mask << (bytePosition * 8);

  long masked = num & mask;
  return masked >> (bytePosition * 8);
}

long longFromBytes(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
  long num = 0;
  num = (num | byte3) << 3;
  num = (num | byte2) << 2;
  num = (num | byte1) << 1;
  return num | byte0;
}

void serialize(uint8_t buf[], Packet packet) {
  buf[0] = <%= magic_byte %>;

  <% bytes_written = 1 %>
  <% fields.each do |field| %>
  <% case field.type
    when :byte %>
      buf[<%= bytes_written %>] = packet.<%= field.name %>;
      <% bytes_written += 1 %>
    <% when :long %>
      <% 0.upto(3).each do |offset| %>
        buf[<%= bytes_written + offset %>] = byteFromLong(packet.<%= field.name %>, <%= offset %>);
      <% end %>
      <% bytes_written += 4 %>
    <% else %>
      <% raise "No known type #{field.type}" %>
    <% end %>
  <% end %>
}

bool isPacket(uint8_t buf[], int len) {
  return len == sizeof(struct Packet) && buf[0] == <%= magic_byte %>;
}

Packet deserialize(uint8_t buf[]) {
  <% bytes_read = 1 %>
  <% fields.each do |field| %>
  <% case field.type
    when :byte %>
      <%= field.type %> <%= field.name %> = buf[<%= bytes_read %>];
      <% bytes_written += 1 %>
    <% when :long %>
      long <%= field.name %> = longFromBytes(
        <% 0.upto(3).each do |offset| %>
          buf[<%= bytes_read + offset %>] <% if offset != 3 %>,<% end %>
        <% end %>
      );
      <% bytes_read += 4 %>
    <% else %>
      <% raise "No known type #{field.type}" %>
    <% end %>
  <% end %>

  return buildPacket(PacketArgs {
    <% fields.each_with_index do |field, index| %>
      .<%= field.name %> = <%= field.name %> <% if index != fields.length - 1 %>,<% end %>
    <% end %>
  });
}